package testSuit;

import io.qameta.allure.*;
import io.qameta.allure.Attachment;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Issue;
import io.qameta.allure.Link;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import io.qameta.allure.Step;
import io.qameta.allure.Story;
import io.restassured.response.Response;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;

public class VulnerabilityTest {
    String idScan;
    @Test
    @Order(2)
    @Owner("JBGroup")
    @Epic("Vulnerability")
    @Feature("Vulnerability Scan")
    @Story("OWASP ZAP")
    @DisplayName("Realizar un escaneo de vulnerabilidades")
    @io.qameta.allure.Description("Realizar un escaneo de vulnerabilidades en la aplicacion web usando OWASP ZAP")
    @Link(name="test case manual", url="jira/123123")
    @Issue("DEF12312313")
    @Severity(SeverityLevel.BLOCKER)
    public void scanVulnerabilityTest() throws InterruptedException {
        idScan = startScanner();
        waitUntilScannerIsRunning(idScan);
    }

    @AfterEach
    public void reportAfter(){
        Response response;
        // obtener lista alertas

        response = given()
                .queryParam("baseurl","https://todo.ly/")
                .log().all().
                when()
                .get("http://localhost:9091/HTML/alert/view/alerts/");
        response.then()
                .log().all();
        this.attachmentHTML("Report Alerts",response.getBody().asString());
        // obtener lista de vulnerabilidades
        response = given()
                .queryParam("scanId",idScan)
                .log().all().
                when()
                .get("http://localhost:9091/HTML/ascan/view/scanProgress/");
        response.then()
                .log().all();
        this.attachmentHTML("Vulnerability List",response.getBody().asString());
        // generar el reporte
        response = given()
                .log().all().
                when()
                .get("http://localhost:9091/OTHER/core/other/htmlreport/");
        response.then()
                .log().all();
        this.attachmentHTML("OWASP ZAP Vulnerability Detail Report",response.getBody().asString());

    }

    @Attachment(value = "{0}", type = "text/html")
    public String attachmentHTML(String name, String content) {
        return content;
    }

    @Step("Espera a que el escaneo se complete en 100%")
    private static void waitUntilScannerIsRunning(String idScan) throws InterruptedException {
        Response response;
        String status="0";
        do{
            Thread.sleep(10000);

            response = given()
                    .queryParam("scanId", idScan)
                    .log().all()
                    .when()
                    .get("http://localhost:9091/JSON/ascan/view/status/");
            response.then().log().all();
            status=response.then().extract().path("status");
            System.out.println("Estado Actual:["+status+"%]");

        }while(!status.equals("100"));
        System.out.println("Completed:"+status+"% == 100%");
    }
    @Step("Iniciar el escaneo de Vulnerabilidades usando ZAP")
    private static String startScanner() {
        Response response = given()
                .queryParam("url","https://todo.ly/")
                .log().all().
                when()
                .get("http://localhost:9091/JSON/ascan/action/scan/");
        response.then()
                .log().all();

        String idScan = response.then().extract().path("scan");
        return idScan;
    }
}

